cmake_minimum_required(VERSION 3.16)

project(svn-clean VERSION 0.1.0.0 LANGUAGES CXX)

message(STATUS "CMake Version: ${CMAKE_VERSION}")
message(STATUS "CMake System: ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMake Generator: ${CMAKE_GENERATOR}")
message(STATUS "CMake Source Dir: ${CMAKE_SOURCE_DIR}")
message(STATUS "CMake Binary Dir: ${CMAKE_BINARY_DIR}")

# Not allowing mixing of the CMake source and build directories.
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
	message(FATAL_ERROR "The source tree and build tree cannot be the same.")
endif()

# Set the default build type. See the following link,
#   https://www.kitware.com/cmake-and-the-default-build-type/
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
	message(STATUS "Setting build type to 'Release' as none was specified.")
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
elseif(CMAKE_BUILD_TYPE)
	message(STATUS "CMake Build Type: ${CMAKE_BUILD_TYPE}")
endif()

# Allow usage of folders if supported.
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# This project requires at least C++11.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Add options specifically for building with Visual Studio. Most of these were
# obtained by porting over the default settings that Visual Studio uses. These
# are set here in order to override what CMake sets as the default flags. For
# example, CMake hard-codes /Zi for builds with debugging information, however
# I want to use what VS uses -- /ZI.
if(MSVC)
	set(PROJ_CXX_FLAGS "/W3 /WX- /sdl /EHsc /GS /permissive- /Zc:inline")
	set(PROJ_CXX_FLAGS_DEBUG "/ZI /Od /RTC1")
	set(PROJ_CXX_FLAGS_RELEASE "/O2 /Oi /GL /Gy")
	set(PROJ_CXX_FLAGS_MINSIZEREL "/O1 /Oi /GL /Gy")
	set(PROJ_CXX_FLAGS_RELWITHDEBINFO "/Zi ${PROJ_CXX_FLAGS_RELEASE}")
	set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG         OFF)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE        ON)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL     ON)
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO ON)

	set(PROJ_EXE_LINKER_FLAGS_DEBUG "/DEBUG /INCREMENTAL")
	set(PROJ_EXE_LINKER_FLAGS_RELEASE "/OPT:REF /OPT:ICF /INCREMENTAL:NO")
	set(PROJ_EXE_LINKER_FLAGS_MINSIZEREL "${PROJ_EXE_LINKER_FLAGS_RELEASE}")
	set(PROJ_EXE_LINKER_FLAGS_RELWITHDEBINFO "/DEBUG ${PROJ_EXE_LINKER_FLAGS_RELEASE}")
	set(PROJ_SHARED_LINKER_FLAGS_DEBUG "${PROJ_EXE_LINKER_FLAGS_DEBUG}")
	set(PROJ_SHARED_LINKER_FLAGS_RELEASE "${PROJ_EXE_LINKER_FLAGS_RELEASE}")
	set(PROJ_SHARED_LINKER_FLAGS_MINSIZEREL "${PROJ_EXE_LINKER_FLAGS_MINSIZEREL}")
	set(PROJ_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${PROJ_EXE_LINKER_FLAGS_RELWITHDEBINFO}")

	# Define the appropriate debug macros for every platform.
	string(APPEND PROJ_CXX_FLAGS_DEBUG " /D_DEBUG")
	string(APPEND PROJ_CXX_FLAGS_RELEASE " /DNDEBUG")
	string(APPEND PROJ_CXX_FLAGS_MINSIZEREL " /DNDEBUG")
	string(APPEND PROJ_CXX_FLAGS_RELWITHDEBINFO " /DNDEBUG")
else()
	# Define the appropriate debug macros for every platform.
	set(PROJ_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
	set(PROJ_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNDEBUG")
	set(PROJ_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -DNDEBUG")
	set(PROJ_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DNDEBUG")
	set(PROJ_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
	set(PROJ_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
	set(PROJ_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}")
	set(PROJ_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
	set(PROJ_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
	set(PROJ_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
	set(PROJ_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL}")
	set(PROJ_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
endif()

if(WIN32)
	# Target Windows 7 at a minimum.
	string(APPEND PROJ_CXX_FLAGS " /D_WIN32_WINNT=0x0601")
	# Ensure the WIN32 macro is defined.
	string(APPEND PROJ_CXX_FLAGS " /DWIN32")
	# Put the Win32 API onto a diet.
	string(APPEND PROJ_CXX_FLAGS " /DWIN32_LEAN_AND_MEAN /DSTRICT /DSTRICT_TYPED_ITEMIDS /DNOMINMAX")
	# Ensure we're using Unicode APIs when building for Windows.
	string(APPEND PROJ_CXX_FLAGS " /DUNICODE /D_UNICODE")
endif()

# Set the flag overrides.
set(CMAKE_CXX_FLAGS "${PROJ_CXX_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "${PROJ_CXX_FLAGS_DEBUG}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "${PROJ_CXX_FLAGS_RELEASE}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_MINSIZEREL "${PROJ_CXX_FLAGS_MINSIZEREL}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${PROJ_CXX_FLAGS_RELWITHDEBINFO}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${PROJ_EXE_LINKER_FLAGS_DEBUG}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${PROJ_EXE_LINKER_FLAGS_RELEASE}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${PROJ_EXE_LINKER_FLAGS_MINSIZEREL}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${PROJ_EXE_LINKER_FLAGS_RELWITHDEBINFO}" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${PROJ_SHARED_LINKER_FLAGS_DEBUG}" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${PROJ_SHARED_LINKER_FLAGS_RELEASE}" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${PROJ_SHARED_LINKER_FLAGS_MINSIZEREL}" CACHE STRING "" FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${PROJ_SHARED_LINKER_FLAGS_RELWITHDEBINFO}" CACHE STRING "" FORCE)

configure_file(src/version.h.in src/version.h @ONLY)
include_directories("${CMAKE_CURRENT_BINARY_DIR}/src")

set(
	HEADERS
	src/platform.h
	${CMAKE_CURRENT_BINARY_DIR}/src/version.h
)

set(SOURCES src/svn-clean.cpp)

if(WIN32)
	list(APPEND SOURCES src/platform_win32.cpp)
	list(APPEND SOURCES src/svn-clean.rc)
else()
	list(APPEND SOURCES src/platform_posix.cpp)
endif()

add_executable(svn-clean ${SOURCES} ${HEADERS})
target_compile_definitions(svn-clean PRIVATE PUGIXML_HEADER_ONLY)

if(WIN32)
	target_link_libraries(svn-clean PRIVATE shlwapi)
endif()
